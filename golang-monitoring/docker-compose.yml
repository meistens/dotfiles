services:
  # golang
  go-app:
    build: .
    container_name: go-app # TODO: change
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - ./logs:/app/logs:Z
    networks:
      - monitoring
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis
  redis:
    image: redis:8-alpine
    container_name: redis_server_change
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
      - monitoring

  # PostgreSQL
  postgres:
    image: postgres:17.5-alpine3.21
    container_name: name_can_be_changed
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init_old/init_newusers.sql:/docker-entrypoint-initdb.d/init.sql:ro,Z
    networks:
      - app-network
      - monitoring

  # postgres exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter_change
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - monitoring

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter_change
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - monitoring

  # prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_change
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:Z
      - ./alerts.yml:/etc/prometheus/alerts.yml:Z
      - prometheus_data:/prometheus
    networks:
      - monitoring

  # grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_can_be_changed
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring

  # Loki
  loki:
    image: grafana/loki:latest
    container_name: loki_can_be_changed
    ports:
      - "3100:3100"
    command:
      - --config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config/loki-config.yml:/etc/loki/local-config.yaml:ro,Z
      - loki_data:/loki
    restart: unless-stopped
    networks:
      - monitoring

  # Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: promtail_can_be_changed
    user: "0:0" # permission issues, RHEL-related OS issues
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro,Z
      - ./logs:/var/log/app:rw,Z
      - /var/log/journal:/var/log/journal:ro
      - /run/log/journal:/run/log/journal:ro
      # System logs:
      - /var/log:/var/log:ro
    command:
      - --config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monitoring

  # AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager_can_be_changed
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:Z
      - alertmanager_data:/alertmanager:Z
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  alertmanager_data:
  postgres_data:
  redis_data:

networks:
  monitoring:
    driver: bridge
  app-network:
    driver: bridge
